---
import { Astronav, MenuIcon, MenuItems } from "astro-navbar";
import { config } from "src/config";
import type CategoryList from "src/types/categoryList";

const { default: logoSVG } = await import("@assets/logoFD.svg?raw");
const { default: cartSVG } = await import("@assets/cart.svg?raw");
const { default: downSVG } = await import("@assets/down.svg?raw");

interface Props {
  categories: CategoryList[];
  categorySelected?: string;
}
const { categories, categorySelected } = Astro.props;
---

<header>
  <Astronav closeOnClick>
    <div class="headerContainer">
      <div class="logoContainer">
        <a href={config.base}>
          <Fragment set:html={logoSVG} />
        </a>
      </div>

      <div class="navMenu">
        <a href={`${config.base}/carrito`} class="cartLink">
          <Fragment set:html={cartSVG} />
          <span id="cartCount" class="cartCount"></span>
        </a>
        <MenuIcon class="menuIcon" />
      </div>
    </div>
  </Astronav>

  <MenuItems class="itemsBox hidden">
    <ul class="mainNav">
      <li><a class="navLink" href={config.base}>Inicio</a></li>
      <li>
        <a class="navLink" href={`${config.base}/about`}>Sobre nosotros</a>
      </li>
      <li class="hr"><hr /></li>
    </ul>

    <input
      type="checkbox"
      id="toggleCategories"
      class="toggleCategories"
      hidden
    />
    <label for="toggleCategories" id="toggleCategoriesBtn">
      <Fragment set:html={downSVG} />
    </label>
    <ul class="categoryList">
      {
        categories &&
          categories.map((c) => (
            <li>
              <a
                href={`${config.base}/categories/${c.name}`}
                class={`navLink categoryLink ${categorySelected === c.name ? "selected" : ""}`}
              >
                {c.name} <span class="count"> ({c.count})</span>
              </a>
            </li>
          ))
      }
    </ul>
  </MenuItems>
</header>

<style>
  header {
    --background-color: var(--principal-background-color);
    --background-color-dark: var(--principal-background-color-dark);
    --background-color-light: var(--principal-background-color-light);
    --text-color: rgba(35, 41, 70, 0.98);
    --itemBox-background-color: #d5c4a4;
    --menu-size: 3rem;
    --header-icon-size: 10rem;
    --header-pc-icon-size: 7rem;
    --header-pc-height: 130px;

    margin-bottom: 0.5rem;
  }

  .headerContainer {
    width: 100%;
    padding: 0.5rem;
    background: var(--background-color);

    box-shadow: 0 4px 24px 0 rgba(163, 174, 214, 0.1);
    border-radius: 0 0 18px 18px;

    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .logoContainer a {
    display: flex;
    align-items: center;
    gap: 14px;
    text-decoration: none;
  }

  :global(.logoContainer svg) {
    color: var(--text-color);
    width: var(--header-icon-size);
    height: 100%;
  }

  .navMenu {
    display: flex;
    gap: 15px;
  }
  .menuIcon {
    width: var(--menu-size);
    height: var(--menu-size);
    font-size: 2.2rem;

    padding: 6px;
  }

  :global(#astronav-menu) {
    background-color: transparent;
    border: none;
    cursor: pointer;
    background-image: none;
    color: inherit;

    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Items Box */
  .itemsBox {
    width: 100%;
    height: 100%;
    background-color: var(--itemBox-background-color);
    box-shadow: 0 4px 24px 0 rgba(163, 174, 214, 0.1);
    padding-bottom: 10rem;
    padding-inline: 1rem;

    position: absolute;
    right: 0;
    z-index: 2;
    transition: 0.5s;
    overflow-x: hidden;
  }
  .itemsBox.hidden {
    display: initial;
    width: 0;
    padding: 0;
  }
  .itemsBox ul {
    list-style: none;
  }
  .itemsBox hr {
    border: 1px solid #fff;
    margin: 10px 0;
  }

  .navLink {
    color: #fff;
    overflow-x: hidden;
    text-wrap: nowrap;
    width: 100%;
    display: block;
    text-decoration: none;
    padding: 1rem;
    font-weight: bold;
  }
  .itemsBox li:not(:first-of-type) .navLink {
    border-top: 2px solid #ffffff5d;
  }
  .navLink:hover,
  .navLink:focus,
  .categoryLink.selected {
    color: #ffffff9e;
    transform: translateX(20px);
  }

  :global(.itemsBox svg),
  :global(.itemsBox.hidden svg) {
    display: none;
  }

  /* Cart */
  .cartLink {
    position: relative;
    display: flex;
    align-items: center;
    color: var(--text-color);
  }
  :global(.cartLink svg) {
    width: calc(var(--menu-size) - 10px);
    height: calc(var(--menu-size) - 10px);
  }
  .cartLink:hover {
    animation: shake 0.5s infinite;
  }
  .cartCount {
    position: absolute;
    top: -8px;
    right: -12px;
    background: #f7cac9;
    border-radius: 50%;
    font-size: 0.85em;
    padding: 0.1em 0.5em;
    font-weight: bold;
    min-width: 1.5em;
    text-align: center;
    display: none;
  }

  @keyframes shake {
    0% {
      transform: translateY(0);
    }
    15% {
      transform: translateY(-5px);
    }
    30% {
      transform: translateY(5px);
    }
    45% {
      transform: translateY(-5px);
    }
    60% {
      transform: translateY(5px);
    }
    75% {
      transform: translateY(-5px);
    }
    100% {
      transform: translateY(0);
    }
  }

  @media screen and (min-width: 1000px) {
    .headerContainer {
      border-radius: 0;
      align-items: flex-end;
      height: var(--header-pc-height);
      padding: 0.5rem 0;
    }

    .logoContainer img,
    .navMenu {
      z-index: 10;
    }

    :global(.logoContainer svg) {
      height: var(--header-pc-icon-size);
      min-width: auto;
      width: 250px;
    }

    :global(.cartLink svg) {
      margin-bottom: 5px;
    }

    .navMenu .menuIcon {
      display: none;
    }

    /* ItemsBox */
    .itemsBox,
    .itemsBox.hidden {
      width: auto;
      height: var(--header-pc-height);
      box-shadow: none;
      transition: none;
      background-color: transparent;
      padding: 0;
      padding-bottom: 5px;

      top: 0;
      left: 250px;

      display: grid;
      align-items: start;
      justify-items: end;
      gap: 20px 10px;
      grid-template-rows: 1fr 50px;
      grid-template-columns: auto 25px 70px;
      overflow: visible;
    }

    .itemsBox ul {
      float: initial;
    }

    .navLink {
      border-radius: 0;
      padding: 0.7rem 1rem;
    }
    .navLink:hover,
    .navLink:focus,
    .categoryLink.selected {
      background-color: #bbab8e;
      transform: translateX(0);
    }
    .itemsBox li:not(:first-of-type) .navLink {
      border-top: none;
    }
    li .navLink {
      border: none;
    }
    .itemsBox hr,
    .itemsBox li.hr {
      display: none;
    }

    .itemsBox ul.mainNav,
    .itemsBox.hidden ul.mainNav {
      width: initial;
      margin-inline: 10px;
      background-color: var(--itemBox-background-color);

      overflow: hidden;
      border-end-end-radius: 10px;
      border-end-start-radius: 10px;

      grid-column: 1/4;
      display: flex;
      flex-direction: row;
      gap: 5px;
      align-items: center;
      justify-content: flex-end;
    }

    /* Categories list */
    .itemsBox .categoryList,
    .itemsBox.hidden .categoryList {
      grid-column: 1;
      grid-row: 2;
      width: initial;
      max-width: 1000px;
      background-color: var(--itemBox-background-color);

      display: flex;
      flex-direction: row-reverse;
      align-content: space-between;
      align-items: flex-start;
      flex-wrap: wrap;
      transition: 0.3s;
      border-radius: 10px;
    }
    .categoryList {
      height: 45px;
      overflow: hidden;
      margin: 0 0.5rem 0 0.5rem;
    }

    .itemsBox #toggleCategoriesBtn {
      grid-column: 2/3;
      grid-row: 2/3;
      user-select: none;
      height: 45px;
      display: flex;
    }
    :global(.itemsBox svg),
    :global(.itemsBox.hidden svg) {
      display: block;
      width: 25px;
      cursor: pointer;
      transition: transform 0.3s;
      /* color: var(--background-color-dark); */
    }

    :global(.toggleCategories:checked ~ .categoryList) {
      height: 250px;
      padding: 0 0.5rem 0.5rem 0.5rem;
      box-shadow: 1px 5px 5px #bbbbbb;
    }
    :global(.toggleCategories:checked ~ label svg) {
      transform: rotate(180deg);
    }
  }
</style>

<script type="module">
  // Mostrar cantidad de productos en el carrito
  window.updateCartCount = function () {
    const carrito = JSON.parse(localStorage.getItem("carrito") || "[]");
    const count = carrito.reduce((acc, p) => acc + (p.cantidad || 1), 0);
    const cartCount = document.getElementById("cartCount");
    if (cartCount) {
      if (count > 0) {
        cartCount.textContent = count;
        cartCount.style.display = "inline-block";
      } else {
        cartCount.style.display = "none";
      }
    }
  };

  // Llama una vez al cargar
  window.updateCartCount();

  // Opcional: actualiza en tiempo real si el carrito cambia en otra pestaña
  window.addEventListener("storage", (e) => {
    if (e.key === "carrito") window.updateCartCount();
  });

  function checkCategoryListWidth() {
    const categoryList = document.querySelector(".categoryList");
    const toggleBtn = document.getElementById("toggleCategoriesBtn");

    if (!categoryList || !toggleBtn) return;

    // Solo en escritorio
    if (window.innerWidth >= 1000) {
      // Mostrar el botón solo si el ancho visible es exactamente 1000px
      if (categoryList.offsetWidth >= 757) {
        toggleBtn.style.display = "flex";
      } else {
        toggleBtn.style.display = "none";
      }
    } else {
      toggleBtn.style.display = "none";
    }
  }

  // Ejecutar al cargar y al redimensionar
  window.addEventListener("DOMContentLoaded", checkCategoryListWidth);
  window.addEventListener("resize", checkCategoryListWidth);
</script>
